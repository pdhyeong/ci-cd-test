name: nodejs deploy

on:
  push: 
    branches: 
      - main
      - dev
      - TEST
    paths: 
      - server/**
  workflow_dispatch: 

env:
  DOCKER_IMAGE: ghcr.io/pdhyeong/ci-cd-test
  NAME: ci-cd-test
  VERSION: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      working-directory: "./server"

    steps:
      - name: checkout code
        uses: actions/checkout@v3.3.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{secrets.ACTOR}}
          password: ${{secrets.CR_PAT}}

      - name: Check docker images
        run:
          docker ps -a

      - name: Docker image push
        uses: docker/build-push-action@v4
        with: 
          context: ${{env.working-directory}}
          push: true
          platforms: linux/amd64
          tags: ${{env.DOCKER_IMAGE}}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max


  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, label-development ]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{secrets.ACTOR}}
          password: ${{secrets.CR_PAT}}

      - name: Check docker container
        run: 
          docker ps -a

      - name: Check docker images
        run:
          docker images
          
      - name: Docker run
        run: |
          docker ps -q --filter "name={{env.DOCKER_IMAGE}}" | grep -q . && docker stop {{env.DOCKER_IMAGE}} && docker rm -fv {{env.DOCKER_IMAGE}}
          docker run -d -p 5050:5050 --name {{env.NAME}} --restart always ${{ env.DOCKER_IMAGE }}:latest